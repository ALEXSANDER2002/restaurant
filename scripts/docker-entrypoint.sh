#!/bin/bash
set -e

echo "üöÄ Iniciando entrypoint do Docker..."

# Fun√ß√£o para aguardar o banco estar dispon√≠vel
wait_for_postgres() {
    echo "‚è≥ Aguardando PostgreSQL estar dispon√≠vel..."
    
    while ! nc -z postgres 5432; do
        echo "‚è≥ PostgreSQL n√£o est√° dispon√≠vel ainda - aguardando..."
        sleep 2
    done
    
    echo "‚úÖ PostgreSQL est√° dispon√≠vel!"
}

# Fun√ß√£o para executar migra√ß√µes
run_migrations() {
    echo "üîÑ Executando migra√ß√µes do Drizzle..."
    
    # Tenta executar as migra√ß√µes
    if pnpm drizzle-kit push; then
        echo "‚úÖ Migra√ß√µes executadas com sucesso!"
    else
        echo "‚ùå Erro ao executar migra√ß√µes. Tentando novamente em 5 segundos..."
        sleep 5
        if pnpm drizzle-kit push; then
            echo "‚úÖ Migra√ß√µes executadas com sucesso na segunda tentativa!"
        else
            echo "‚ùå Falha cr√≠tica nas migra√ß√µes. Abortando..."
            exit 1
        fi
    fi
}

# Fun√ß√£o para verificar se o banco tem as tabelas
check_database() {
    echo "üîç Verificando estrutura do banco..."
    
    # Query simples para verificar se h√° tabelas
    if node -e "
        const { Pool } = require('pg');
        const pool = new Pool({ connectionString: process.env.DATABASE_URL });
        pool.query('SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = \$1', ['public'])
        .then(result => {
            console.log('Tabelas encontradas:', result.rows[0].count);
            process.exit(0);
        })
        .catch(err => {
            console.error('Erro ao verificar banco:', err.message);
            process.exit(1);
        });
    "; then
        echo "‚úÖ Banco verificado com sucesso!"
    else
        echo "‚ùå Erro ao verificar banco"
        exit 1
    fi
}

# Fun√ß√£o para fazer seed inicial se necess√°rio
run_initial_seed() {
    echo "üå± Verificando se precisa executar seed inicial..."
    
    # Verifica se j√° existe dados (exemplo: verifica se existe pelo menos um usu√°rio)
    USER_COUNT=$(node -e "
        const { Pool } = require('pg');
        const pool = new Pool({ connectionString: process.env.DATABASE_URL });
        pool.query('SELECT COUNT(*) FROM users')
        .then(result => {
            console.log(result.rows[0].count);
            process.exit(0);
        })
        .catch(err => {
            console.log('0');
            process.exit(0);
        });
    " 2>/dev/null || echo "0")
    
    if [ "$USER_COUNT" = "0" ]; then
        echo "üå± Executando seed inicial..."
        
        # Executa os seeds se dispon√≠veis
        if [ -f "scripts/setup-sistema.js" ]; then
            node scripts/setup-sistema.js || echo "‚ö†Ô∏è Aviso: Seed falhou, mas continuando..."
        fi
        
        echo "‚úÖ Seed inicial conclu√≠do!"
    else
        echo "‚úÖ Banco j√° possui dados, pulando seed inicial"
    fi
}

# Executar verifica√ß√µes e prepara√ß√µes
echo "üîß Preparando ambiente..."

# Aguardar banco estar dispon√≠vel
wait_for_postgres

# Aguardar um pouco mais para garantir que est√° totalmente pronto
echo "‚è≥ Aguardando estabiliza√ß√£o do banco..."
sleep 5

# Executar migra√ß√µes
run_migrations

# Verificar banco
check_database

# Executar seed inicial se necess√°rio
run_initial_seed

echo "üéâ Prepara√ß√£o conclu√≠da! Iniciando aplica√ß√£o..."

# Executar o comando passado como par√¢metro (normalmente "pnpm start")
exec "$@" 