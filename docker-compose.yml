# docker-compose.yml

services:
  # Banco PostgreSQL
  postgres:
    image: postgres:15
    container_name: restaurant_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: restaurant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d restaurant"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - restaurant-network

  # Aplicação Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restaurant_app
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/restaurant
      NODE_ENV: production
      APP_URL: http://localhost
      NEXTAUTH_URL: http://localhost
      NEXTAUTH_SECRET: sua_chave_secreta_super_segura_123456789
      # Mercado Pago (TEST)
      MERCADO_PAGO_ACCESS_TOKEN: TEST-8615861957158765-062220-17a5b9caeb28c62cb27b06bf8296df7a-450378695
      MERCADO_PAGO_PUBLIC_KEY: TEST-1cff22c1-f4ea-4ea9-a009-345710763660
      NEXT_PUBLIC_MERCADO_PAGO_PUBLIC_KEY: TEST-1cff22c1-f4ea-4ea9-a009-345710763660
      MERCADO_PAGO_CLIENT_ID: 8658884450610340
      MERCADO_PAGO_CLIENT_SECRET: CK4Xo24WusntZm0F0Tc7XXiwwEIkIuKH
      MERCADO_PAGO_WEBHOOK_SECRET: dfcc6e97deb787c5a7ae92027ec3bc451c2c9c88af0aba98f45d300a5325cd46
      # Google Gemini
      GOOGLE_GEMINI_API_KEY: AIzaSyAP0gGdFkjc_nQrJFexH4uXdznmCKM_faI
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - restaurant-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/session"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: restaurant_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  restaurant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16