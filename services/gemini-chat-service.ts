import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY || "");

// Contexto espec√≠fico do Restaurante Universit√°rio da UNIFESSPA
const CONTEXT = `
Voc√™ √© um assistente virtual especializado no Restaurante Universit√°rio (RU) da UNIFESSPA (Universidade Federal do Sul e Sudeste do Par√°).

INFORMA√á√ïES IMPORTANTES SOBRE O RU DA UNIFESSPA:

**Localiza√ß√£o e Campus:**
- Campus de Marab√°: Folha 31, Quadra 07, Lote Especial - Nova Marab√°
- Campus de Santana do Araguaia: PA-287, Km 14, Zona Rural
- Campus de Rondon do Par√°: Rua Raimundo Nonato, 1240 - Centro
- Campus de Xinguara: Rua Coronel Fontoura, 515 - Centro

**Hor√°rios de Funcionamento:**
- Almo√ßo: 11h00 √†s 14h00 (apenas almo√ßo, n√£o servimos jantar)
- Funcionamento: Segunda a sexta-feira
- Fechado aos finais de semana e feriados

**Pre√ßos:**
- Estudantes Subsidiados: R$ 2,00 por refei√ß√£o (com cota por escola, cor, renda)
- N√£o Subsidiados/Visitantes: R$ 13,00 por refei√ß√£o

**Card√°pio T√≠pico:**
- Arroz e feij√£o (sempre dispon√≠vel)
- Prato principal (carne bovina, frango, peixe)
- Op√ß√£o vegetariana/vegana
- Guarni√ß√µes (batata, mandioca, macarr√£o, etc.)
- Saladas variadas
- Sobremesa (fruta da √©poca ou doce)
- Suco natural

**Formas de Pagamento:**
- Cart√£o do estudante (com cr√©ditos pr√©-pagos)
- Dinheiro
- Pix
- N√£o aceita cart√£o de cr√©dito/d√©bito

**Programas Sociais:**
- Aux√≠lio alimenta√ß√£o para estudantes em vulnerabilidade social
- Programa de Assist√™ncia Estudantil (PRAE)
- Bolsas de alimenta√ß√£o gratuita

**Caracter√≠sticas da UNIFESSPA:**
- Universidade Federal do Sul e Sudeste do Par√°
- Criada em 2013
- M√∫ltiplos campi na regi√£o
- Forte compromisso com inclus√£o social
- Atende estudantes de diversas regi√µes do Par√°

**Diretrizes de Resposta:**
1. Seja cordial e acolhedor
2. Use linguagem simples e acess√≠vel
3. Forne√ßa informa√ß√µes precisas e √∫teis
4. Quando n√£o souber algo espec√≠fico, sugira onde buscar mais informa√ß√µes
5. Mantenha o foco no contexto universit√°rio e no RU
6. Considere a realidade socioecon√¥mica da regi√£o
7. Valorize a import√¢ncia da alimenta√ß√£o universit√°ria
8. Responda sempre em portugu√™s brasileiro

Se a pergunta n√£o for relacionada ao RU ou √† UNIFESSPA, redirecione educadamente para temas relacionados ao restaurante universit√°rio.
`;

export class GeminiChatService {
  private model;

  constructor() {
    this.model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  }

  private getLanguageInstruction(language: string): string {
    switch (language) {
      case 'en-US':
        return 'Always respond in English.';
      case 'es':
        return 'Siempre responde en espa√±ol.';
      case 'fr':
        return 'R√©pondez toujours en fran√ßais.';
      default:
        return 'Responda sempre em portugu√™s brasileiro.';
    }
  }

  async generateResponse(userMessage: string, language: string = 'pt-BR'): Promise<string> {
    try {
      console.log('ü§ñ Gerando resposta com Gemini para:', userMessage);
      const languageInstruction = this.getLanguageInstruction(language);
      const prompt = `${CONTEXT}\n\n${languageInstruction}\n\nPergunta do usu√°rio: ${userMessage}\n\nResposta:`;
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Resposta gerada com sucesso');
      return text;
    } catch (error) {
      console.error('‚ùå Erro ao gerar resposta com Gemini:', error);
      throw new Error('Erro ao processar sua mensagem. Tente novamente.');
    }
  }

  async generateResponseWithHistory(messages: Array<{role: string, content: string}>, language: string = 'pt-BR'): Promise<string> {
    try {
      console.log('üß† Gerando resposta com hist√≥rico, mensagens:', messages.length);
      
      // Construir o hist√≥rico da conversa
      const languageInstruction = this.getLanguageInstruction(language);
      let conversationHistory = `${CONTEXT}\n\n${languageInstruction}\n\nHist√≥rico da conversa:\n`;
      
      messages.forEach((msg, index) => {
        if (index === 0) return; // Pular mensagem inicial do sistema
        const role = msg.role === 'user' ? 'Usu√°rio' : 'Assistente';
        conversationHistory += `${role}: ${msg.content}\n`;
      });
      
      // √öltima mensagem do usu√°rio
      const lastUserMessage = messages[messages.length - 1];
      if (lastUserMessage.role === 'user') {
        conversationHistory += `\nPergunta atual: ${lastUserMessage.content}\n\nResposta:`;
      }
      
      const result = await this.model.generateContent(conversationHistory);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Resposta com hist√≥rico gerada com sucesso');
      return text;
    } catch (error) {
      console.error('‚ùå Erro ao gerar resposta com hist√≥rico:', error);
      throw new Error('Erro ao processar sua mensagem. Tente novamente.');
    }
  }
}

export const geminiChatService = new GeminiChatService(); 