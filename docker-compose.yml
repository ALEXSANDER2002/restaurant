version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: restaurant_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: restaurant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicação Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restaurant_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Banco de dados
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/restaurant
      
      # Node.js
      NODE_ENV: production
      
      # Next.js
      NEXT_TELEMETRY_DISABLED: 1
      
      # Mercado Pago (configure com suas chaves)
      MERCADO_PAGO_ACCESS_TOKEN: ${MERCADO_PAGO_ACCESS_TOKEN}
      MERCADO_PAGO_PUBLIC_KEY: ${MERCADO_PAGO_PUBLIC_KEY}
      MERCADO_PAGO_CLIENT_ID: ${MERCADO_PAGO_CLIENT_ID}
      MERCADO_PAGO_CLIENT_SECRET: ${MERCADO_PAGO_CLIENT_SECRET}
      MERCADO_PAGO_WEBHOOK_SECRET: ${MERCADO_PAGO_WEBHOOK_SECRET}
      
      # URL da aplicação
      APP_URL: ${APP_URL:-http://localhost:3000}
      
      # Autenticação
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      
      # Google Gemini AI
      GOOGLE_GEMINI_API_KEY: ${GOOGLE_GEMINI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - restaurant_network
    volumes:
      - ./uploads:/app/uploads
    command: >
      sh -c "
        echo 'Aguardando banco de dados...' &&
        sleep 10 &&
        echo 'Executando migrações...' &&
        npx drizzle-kit push &&
        echo 'Iniciando aplicação...' &&
        node server.js
      "

  # Nginx para proxy reverso (opcional, para produção)
  nginx:
    image: nginx:alpine
    container_name: restaurant_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - restaurant_network

volumes:
  postgres_data:
    driver: local

networks:
  restaurant_network:
    driver: bridge 