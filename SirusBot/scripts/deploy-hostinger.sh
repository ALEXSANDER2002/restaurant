#!/bin/bash
# deploy-hostinger.sh - Script de Deploy para Hostinger
# Uso: ./scripts/deploy-hostinger.sh

set -e

echo "üöÄ DEPLOY SIRUS - SISTEMA DE RESTAURANTE UNIVERSIT√ÅRIO"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script a partir da raiz do projeto!"
fi

log "Iniciando deploy para produ√ß√£o..."

# 1. Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado! Instale o Docker primeiro."
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado! Instale o Docker Compose primeiro."
fi

success "Docker e Docker Compose encontrados"

# 2. Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    log "Arquivo .env n√£o encontrado. Copiando template de produ√ß√£o..."
    cp .env.production .env
    warning "Configure o arquivo .env com suas credenciais reais antes de continuar!"
    warning "Principalmente: APP_URL, NEXTAUTH_SECRET e credenciais do Mercado Pago"
    
    echo ""
    echo "Pressione ENTER para continuar ap√≥s configurar o .env..."
    read -r
fi

# 3. Criar diret√≥rios necess√°rios
log "Criando diret√≥rios necess√°rios..."
mkdir -p data/postgres
mkdir -p uploads
mkdir -p ssl
success "Diret√≥rios criados"

# 4. Parar containers existentes
log "Parando containers existentes..."
docker-compose -f docker-compose.prod.yml down --remove-orphans || true
success "Containers parados"

# 5. Limpar imagens antigas (opcional)
log "Limpando imagens antigas..."
docker system prune -f || true

# 6. Construir e iniciar containers
log "Construindo e iniciando containers..."
docker-compose -f docker-compose.prod.yml up -d --build

# 7. Aguardar containers ficarem saud√°veis
log "Aguardando containers ficarem saud√°veis..."
sleep 10

# 8. Verificar status dos containers
log "Verificando status dos containers..."
docker-compose -f docker-compose.prod.yml ps

# 9. Executar health checks
log "Executando health checks..."

# Verificar PostgreSQL
if docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -U postgres -d restaurant > /dev/null 2>&1; then
    success "PostgreSQL est√° funcionando"
else
    error "PostgreSQL n√£o est√° respondendo"
fi

# Verificar aplica√ß√£o (aguardar at√© 60 segundos)
log "Aguardando aplica√ß√£o ficar dispon√≠vel..."
for i in {1..12}; do
    if curl -f http://localhost/api/session > /dev/null 2>&1; then
        success "Aplica√ß√£o est√° funcionando"
        break
    fi
    
    if [ $i -eq 12 ]; then
        error "Aplica√ß√£o n√£o ficou dispon√≠vel ap√≥s 60 segundos"
    fi
    
    log "Tentativa $i/12 - aguardando 5 segundos..."
    sleep 5
done

# Verificar Nginx
if curl -f http://localhost/nginx-health > /dev/null 2>&1; then
    success "Nginx est√° funcionando"
else
    error "Nginx n√£o est√° respondendo"
fi

# 10. Mostrar logs iniciais
log "Mostrando logs iniciais..."
docker-compose -f docker-compose.prod.yml logs --tail=20

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "================================"
echo ""
echo "üìã INFORMA√á√ïES DO DEPLOY:"
echo "‚Ä¢ Aplica√ß√£o: http://localhost"
echo "‚Ä¢ Status: docker-compose -f docker-compose.prod.yml ps"
echo "‚Ä¢ Logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "‚Ä¢ Parar: docker-compose -f docker-compose.prod.yml down"
echo ""
echo "üîß PR√ìXIMOS PASSOS:"
echo "1. Configure seu dom√≠nio para apontar para este servidor"
echo "2. Configure SSL/HTTPS (Let's Encrypt recomendado)"
echo "3. Atualize as credenciais do Mercado Pago para produ√ß√£o"
echo "4. Configure backup autom√°tico do banco de dados"
echo ""
echo "üìä MONITORAMENTO:"
echo "‚Ä¢ Health Check Nginx: curl http://localhost/nginx-health"
echo "‚Ä¢ Health Check App: curl http://localhost/api/session"
echo "‚Ä¢ Banco de dados: docker-compose -f docker-compose.prod.yml exec postgres psql -U postgres -d restaurant"
echo ""

success "Sistema SIRUS pronto para produ√ß√£o! üéä" 