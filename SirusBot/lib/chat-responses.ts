import stringSimilarity from "string-similarity"

// Banco de dados de respostas baseadas em palavras-chave
type ResponseData = {
  keywords: string[]
  response: string
}

const responseDatabase: ResponseData[] = [
  {
    keywords: ["hor√°rio", "horarios", "hora", "abre", "fecha", "funcionamento", "expediente"],
    response:
      "O Restaurante Universit√°rio da UNIFESSPA funciona de segunda a sexta-feira:\n\nüïê **Hor√°rio:**\n‚Ä¢ Almo√ßo: 11h00 √†s 14h00\n\n‚ùå N√£o servimos jantar\n‚ùå Fechado aos finais de semana e feriados.\n\nüìç Localizado no Campus de Marab√° - Folha 31, Quadra 07, Lote Especial, Nova Marab√°.",
  },
  {
    keywords: ["pre√ßo", "precos", "valor", "custo", "quanto custa", "pagar"],
    response:
      "üí∞ **Pre√ßos das refei√ß√µes no RU da UNIFESSPA:**\n\n‚Ä¢ üéì Estudantes Subsidiados: R$ 2,00 (com cota por escola, cor, renda)\n‚Ä¢ üë• N√£o Subsidiados/Visitantes: R$ 13,00\n\nüí° **Dica:** Estudantes em vulnerabilidade social podem solicitar aux√≠lio alimenta√ß√£o junto √† PRAE para refei√ß√µes gratuitas ou com desconto!",
  },
  {
    keywords: [
      "card√°pio",
      "cardapio",
      "comida",
      "menu",
      "refei√ß√£o",
      "refeicao",
      "prato",
      "almo√ßo",
      "almocar",
      "jantar",
    ],
    response:
      "Nosso card√°pio varia diariamente e sempre inclui:\n\n‚Ä¢ Arroz e feij√£o\n‚Ä¢ Prato principal (carne ou frango)\n‚Ä¢ Op√ß√£o vegetariana\n‚Ä¢ Guarni√ß√£o\n‚Ä¢ Saladas variadas\n‚Ä¢ Sobremesa (fruta ou doce)\n‚Ä¢ Suco\n\nO card√°pio da semana √© publicado toda segunda-feira no mural do RU e no site da universidade.",
  },
  {
    keywords: ["vegetariano", "vegano", "vegetariana", "vegana", "sem carne"],
    response:
      "Sim, oferecemos op√ß√£o vegetariana em todas as refei√ß√µes! Nosso card√°pio vegetariano √© elaborado por nutricionistas para garantir o equil√≠brio nutricional.",
  },
  {
    keywords: ["pagamento", "pagar", "cart√£o", "cartao", "dinheiro", "pix", "cr√©dito", "credito", "d√©bito", "debito"],
    response:
      "Aceitamos as seguintes formas de pagamento:\n\n‚Ä¢ Cart√£o do estudante (com cr√©ditos)\n‚Ä¢ Dinheiro\n‚Ä¢ Pix\n\nN√£o aceitamos cart√µes de cr√©dito ou d√©bito.",
  },
  {
    keywords: ["localiza√ß√£o", "localizacao", "onde", "endere√ßo", "endereco", "lugar", "fica", "unifesspa", "marab√°"],
    response:
      "üìç **Localiza√ß√£o do RU da UNIFESSPA:**\n\nüèõÔ∏è **Campus Principal - Marab√°:**\nFolha 31, Quadra 07, Lote Especial\nNova Marab√° - PA\n\nüó∫Ô∏è O RU fica no Bloco Central do Campus, pr√≥ximo √† Biblioteca. H√° placas indicativas por todo o campus para facilitar a localiza√ß√£o.\n\nüöå **Transporte:** Acess√≠vel por transporte p√∫blico e possui estacionamento para ve√≠culos.",
  },
  {
    keywords: ["fila", "filas", "lotado", "cheio", "espera", "demora"],
    response:
      "As filas costumam ser maiores entre 12h e 13h. Para evitar filas, recomendamos chegar logo ap√≥s a abertura (11h) ou pr√≥ximo ao final do hor√°rio (13h30).",
  },
  {
    keywords: ["cr√©dito", "credito", "recarga", "carregar", "cart√£o", "cartao"],
    response:
      "Voc√™ pode recarregar os cr√©ditos do seu cart√£o do RU na Central de Atendimento ao Estudante, localizada no pr√©dio da Reitoria, de segunda a sexta, das 8h √†s 17h. Tamb√©m √© poss√≠vel fazer recarga online pelo portal do estudante.",
  },
  {
    keywords: ["bolsa", "aux√≠lio", "auxilio", "assist√™ncia", "assistencia", "gratuito", "gr√°tis", "gratis"],
    response:
      "Estudantes em situa√ß√£o de vulnerabilidade socioecon√¥mica podem solicitar aux√≠lio alimenta√ß√£o junto √† Pr√≥-Reitoria de Assuntos Estudantis. Com esse aux√≠lio, as refei√ß√µes podem ser gratuitas ou ter desconto. Consulte o site da PRAE para mais informa√ß√µes.",
  },
  {
    keywords: [
      "contato",
      "telefone",
      "email",
      "e-mail",
      "falar",
      "ouvidoria",
      "reclama√ß√£o",
      "reclamacao",
      "sugest√£o",
      "sugestao",
    ],
    response:
      "Para entrar em contato com a administra√ß√£o do RU:\n\n‚Ä¢ Telefone: (XX) XXXX-XXXX\n‚Ä¢ E-mail: ru@universidade.edu.br\n‚Ä¢ Presencialmente: Na administra√ß√£o do RU, de segunda a sexta, das 8h √†s 17h.",
  },
  {
    keywords: ["covid", "pandemia", "corona", "coronav√≠rus", "coronavirus", "m√°scara", "mascara", "protocolo"],
    response:
      "Seguimos todos os protocolos de seguran√ßa sanit√°ria. Atualmente, o uso de m√°scara √© opcional, mas mantemos dispensers de √°lcool em gel em v√°rios pontos do restaurante e realizamos higieniza√ß√£o constante dos ambientes.",
  },
  {
    keywords: [
      "alergia",
      "alergias",
      "intoler√¢ncia",
      "intolerancia",
      "al√©rgico",
      "alergico",
      "gl√∫ten",
      "gluten",
      "lactose",
    ],
    response:
      "Informamos os principais al√©rgenos em cada prato do card√°pio. Se voc√™ tem alguma alergia ou intoler√¢ncia alimentar espec√≠fica, recomendamos consultar a equipe de nutri√ß√£o do RU para orienta√ß√µes personalizadas.",
  },
  {
    keywords: ["s√°bado", "sabado", "domingo", "feriado", "fim de semana", "final de semana"],
    response:
      "O Restaurante Universit√°rio n√£o funciona aos s√°bados, domingos e feriados. Nosso atendimento √© apenas de segunda a sexta-feira.",
  },
  {
    keywords: ["caf√©", "cafe", "caf√© da manh√£", "cafe da manha", "desjejum", "breakfast"],
    response:
      "Atualmente, o RU oferece apenas almo√ßo, n√£o temos caf√© da manh√£ nem jantar. H√° algumas lanchonetes no campus para outras refei√ß√µes.",
  },
]

// Resposta padr√£o quando nenhuma palavra-chave √© encontrada
const defaultResponse =
  "N√£o tenho informa√ß√µes espec√≠ficas sobre isso. Posso ajudar com hor√°rios, pre√ßos, card√°pio, localiza√ß√£o, formas de pagamento e outros assuntos relacionados ao Restaurante Universit√°rio. Como posso ajudar?"

// Fun√ß√£o para remover acentos de uma string
function removeAccents(str: string): string {
  return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "")
}

// Fun√ß√£o para normalizar texto (remover acentos, converter para min√∫sculas)
function normalizeText(text: string): string {
  return removeAccents(text.toLowerCase())
}

// Fun√ß√£o para extrair palavras de uma frase
function extractWords(text: string): string[] {
  return text
    .split(/\s+/)
    .filter((word) => word.length > 2) // Ignorar palavras muito curtas
    .map((word) => normalizeText(word))
}

export function getResponseByKeywords(userInput: string): string {
  const normalizedInput = normalizeText(userInput)
  const userWords = extractWords(userInput)

  // Verificar sauda√ß√µes comuns
  if (normalizedInput.match(/ola|oi|eai|hello|hi|hey/)) {
    return "Ol√°! Como posso ajudar voc√™ hoje com informa√ß√µes sobre o Restaurante Universit√°rio?"
  }

  // Verificar agradecimentos
  if (normalizedInput.match(/obrigado|obrigada|valeu|thanks|thank you|agradecido|agradecida/)) {
    return "De nada! Estou aqui para ajudar. Tem mais alguma pergunta sobre o RU?"
  }

  // Verificar despedidas
  if (normalizedInput.match(/tchau|adeus|ate mais|ate logo|bye|goodbye/)) {
    return "At√© mais! Se precisar de mais informa√ß√µes sobre o RU, √© s√≥ voltar aqui. Tenha um bom dia!"
  }

  // Pontua√ß√£o m√≠nima de similaridade para considerar uma correspond√™ncia
  const SIMILARITY_THRESHOLD = 0.7

  // Armazenar a melhor correspond√™ncia encontrada
  let bestMatch = {
    response: "",
    score: 0,
  }

  // Para cada conjunto de palavras-chave no banco de dados
  for (const data of responseDatabase) {
    // Normalizar todas as palavras-chave
    const normalizedKeywords = data.keywords.map(normalizeText)

    // Verificar correspond√™ncia exata
    if (normalizedKeywords.some((keyword) => normalizedInput.includes(keyword))) {
      return data.response
    }

    // Verificar similaridade entre palavras
    let maxScore = 0

    // Para cada palavra do usu√°rio
    for (const userWord of userWords) {
      // Verificar similaridade com cada palavra-chave
      for (const keyword of normalizedKeywords) {
        // Calcular similaridade apenas para palavras com comprimento similar
        if (Math.abs(userWord.length - keyword.length) <= 3) {
          const similarity = stringSimilarity.compareTwoStrings(userWord, keyword)
          if (similarity > maxScore) {
            maxScore = similarity
          }
        }
      }
    }

    // Se encontramos uma correspond√™ncia melhor
    if (maxScore > bestMatch.score) {
      bestMatch = {
        response: data.response,
        score: maxScore,
      }
    }
  }

  // Se a melhor correspond√™ncia encontrada supera o limiar
  if (bestMatch.score >= SIMILARITY_THRESHOLD) {
    return bestMatch.response
  }

  // Se nenhuma correspond√™ncia for encontrada, retornar resposta padr√£o
  return defaultResponse
}
